use std::io::{Read, Seek, Write};

const CFG_PATH: &str = "./.env";

#[derive(Debug)]
pub struct PostgresConfig {
    username: String,
    password: String,
    database_name: String,
    host: String,
    port: String,
}

impl Default for PostgresConfig {
    fn default() -> Self {
        return PostgresConfig {
            username: String::from("postgres"),
            password: String::from("password"),
            database_name: String::from("mkwppdb"),
            host: String::from("localhost"),
            port: String::from("5432"),
        };
    }
}

impl PostgresConfig {
    pub fn load_from_file() -> Self {
        if !std::path::Path::new(CFG_PATH).is_file() {
            create_config();
        }

        let mut cfg_file = match std::fs::File::options()
            .read(true)
            .write(true)
            .open(CFG_PATH)
        {
            Ok(v) => v,
            Err(e) => {
                println!("Error opening Config");
                println!("{e}");
                std::process::exit(0);
            }
        };

        let mut config = PostgresConfig::default();

        let mut file_string = String::new();
        if let Err(e) = cfg_file.read_to_string(&mut file_string) {
            println!("Error reading Config");
            println!("{e}");
            std::process::exit(0);
        };

        let mut stored_database_url = "";

        for line in file_string.split('\n') {
            if !line.contains('=') {
                continue;
            }

            let mut kv_split = line.split('=');
            let key = match kv_split.next() {
                None => continue,
                Some(v) => v.trim(),
            };
            let value = match kv_split.next() {
                None => continue,
                Some(v) => v.trim(),
            };

            match key {
                "USERNAME" => config.username = String::from(value),
                "PASSWORD" => config.password = String::from(value),
                "DATABASE_NAME" => config.database_name = String::from(value),
                "HOST" => config.host = String::from(value),
                "PORT" => config.port = String::from(value),
                "DATABASE_URL" => stored_database_url = value,
                _ => continue,
            }
        }

        let url = config.to_url();
        if stored_database_url != url {
            println!("DATABASE_URL doesn't match the config data.");

            if let Err(e) = cfg_file.set_len(0).and_then(|_| {
                return cfg_file
                    .rewind()
                    .and_then(|_| return cfg_file.write_all(config.to_file_contents().as_bytes()));
            }) {
                println!("Error rewriting Config");
                println!("{e}");
                println!();
                println!("You can manually replace DATABASE_URL with the following URL:");
                println!("{url}");

                println!("Exiting the process.");
                std::process::exit(0);
            }

            println!("Replaced it for the following URL:");
            println!("{url}");
            println!("Restart the process.");
            std::process::exit(0);
        }

        return config;
    }

    pub fn to_url(&self) -> String {
        return format!(
            "postgres://{}:{}@{}:{}/{}",
            self.username, self.password, self.host, self.port, self.database_name
        );
    }

    fn to_file_contents(&self) -> String {
        return format!(
            "# This will be regenerated by the program.\nUSERNAME={}\nPASSWORD={}\nDATABASE_NAME={}\nHOST={}\nPORT={}\nDATABASE_URL={}",
            self.username, self.password, self.database_name, self.host, self.port, self.to_url()
        );
    }
}

fn create_config() {
    println!("Creating Config");
    let mut new_cfg_file = match std::fs::File::create_new(CFG_PATH) {
        Ok(v) => v,
        Err(e) => {
            println!("Error creating Config");
            println!("{e}");
            std::process::exit(0);
        }
    };

    println!();
    println!("If you don't know what to do, read the README.md file.");
    println!("The .env file has been generated for this installation.");
    println!();
    println!("Exiting the process");

    if let Err(e) = new_cfg_file.write_all(PostgresConfig::default().to_file_contents().as_bytes())
    {
        println!("Error creating Config");
        println!("{e}");
        std::process::exit(0);
    };

    std::process::exit(0);
}
